/*
 * Copyright 2011-2013 Blender Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "stdosl.h"

point safe_divide(point a, point b)
{
  return point((b[0] != 0.0) ? a[0] / b[0] : 0.0,
               (b[1] != 0.0) ? a[1] / b[1] : 0.0,
               (b[2] != 0.0) ? a[2] / b[2] : 0.0);
}

matrix euler_to_mat(point euler){
  matrix mat = matrix(1.0);
  float c1, c2, c3, s1, s2, s3;

  c1 = cos(euler[0]);
  c2 = cos(euler[1]);
  c3 = cos(euler[2]);
  s1 = sin(euler[0]);
  s2 = sin(euler[1]);
  s3 = sin(euler[2]);

  mat[0][0] = c2 * c3;
  mat[0][1] = c1 * s3 + c3 * s1 * s2;
  mat[0][2] = s1 * s3 - c1 * c3 * s2;

  mat[1][0] = -c2 * s3;
  mat[1][1] = c1 * c3 - s1 * s2 * s3;
  mat[1][2] = c3 * s1 + c1 * s2 * s3;

  mat[2][0] = s2;
  mat[2][1] = -c2 * s1;
  mat[2][2] = c1 * c2;

  return mat;
}

shader node_mapping(string vector_type = "point",
                    point VectorIn = point(0.0, 0.0, 0.0),
                    point Location = point(0.0, 0.0, 0.0),
                    point Rotation = point(0.0, 0.0, 0.0),
                    point Scale = point(1.0, 1.0, 1.0),
                    output point VectorOut = point(0.0, 0.0, 0.0))
{
  if (vector_type == "texture") {
    VectorOut = safe_divide(transform(euler_to_mat(-Rotation), (VectorIn - Location)), Scale);
  } else if (vector_type == "point") {
    VectorOut = transform(euler_to_mat(Rotation), (VectorIn * Scale)) + Location;
  } else if (vector_type == "vector") {
    VectorOut = transform(euler_to_mat(Rotation), (VectorIn * Scale));
  } else if (vector_type == "normal") {
    VectorOut = normalize(transform(euler_to_mat(Rotation), safe_divide(VectorIn, Scale)));
  }
}
