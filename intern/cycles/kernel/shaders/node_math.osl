/*
 * Copyright 2011-2013 Blender Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "stdosl.h"

float safe_divide(float a, float b)
{ 
  return (b != 0.0) ? a / b : 0.0;
}

float safe_modulo(float a, float b)
{
  return (b != 0.0) ? fmod(a, b) : 0.0;
}

float safe_sqrt(float a)
{
  return (a > 0.0) ? sqrt(a) : 0.0;
}

float safe_log(float a, float b)
{
  return (a > 0.0 && b > 0.0) ? log(a) / log(b) : 0.0;
}

shader node_math(string type = "add",
                 float A = 0.5,
                 float B = 0.5,
                 output float Result = 0.0)
{
  /* OSL asin, acos, pow check for values that could give rise to nan. */
  if (type == "add")
    Result = A + B;
  else if (type == "subtract")
    Result = A - B;
  else if (type == "multiply")
    Result = A * B;
  else if (type == "divide")
    Result = safe_divide(A, B);
  else if (type == "power")
    Result = pow(A, B);
  else if (type == "logarithm")
    Result = safe_log(A, B);
  else if (type == "sqrt")
    Result = safe_sqrt(A);
  else if (type == "absolute")
    Result = fabs(A);
  else if (type == "minimum")
    Result = min(A, B);
  else if (type == "maximum")
    Result = max(A, B);
  else if (type == "less_than")
    Result = A < B;
  else if (type == "greater_than")
    Result = A > B;
  else if (type == "round")
    Result = floor(A + 0.5);
  else if (type == "floor")
    Result = floor(A);
  else if (type == "ceil")
    Result = ceil(A);
  else if (type == "fraction")
    Result = A - floor(A);
  else if (type == "modulo")
    Result = safe_modulo(A, B);
  else if (type == "sine")
    Result = sin(A);
  else if (type == "cosine")
    Result = cos(A);
  else if (type == "tangent")
    Result = tan(A);
  else if (type == "arcsine")
    Result = asin(A);
  else if (type == "arccosine")
    Result = acos(A);
  else if (type == "arctangent")
    Result = atan(A);
  else if (type == "arctan2")
    Result = atan2(A, B);
  else
    Result = 0.0;
}
