/*
 * Copyright 2018 Blender Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "stdosl.h"

color log3 (color a) {
    return color(log(a[0]), log(a[1]), log(a[2]));
}

shader node_principled_hair_bsdf(
	color Color = 0.0, 
	normal Normal = N,
	string Parametrization = "Direct coloring",
	float Offset = 2.0,
	float RoughnessU = 0.2,
	float RoughnessV = 0.2,
	float IOR = 1.55,

	output closure color BSDF = 0)
{
    color Sigma;

	if (Parametrization == "Direct coloring") {
		Sigma = Color;
	}
	else if (Parametrization == "physical") {
		Sigma = -log3(max(Color, 1e-5));
	}
	else if (Parametrization == "Melanin concentration") {
		Sigma = Color[0]*color(0.419, 0.697, 1.37) + Color[1]*color(0.187, 0.4, 1.05);
	}
	else {
		float roughness_fac = (((((0.245*RoughnessU) + 5.574)*RoughnessU - 10.73)*RoughnessU + 2.532)*RoughnessU - 0.215)*RoughnessU + 5.969;
		Sigma = log3(Color)/roughness_fac;
		Sigma *= Color;
	}

	BSDF = principled_hair(Ng, Color, RoughnessU, RoughnessV, Offset, IOR);
}
