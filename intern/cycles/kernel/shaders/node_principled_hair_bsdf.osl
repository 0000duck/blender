/*
 * Copyright 2018 Blender Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "stdosl.h"

color log3 (color a) {
	return color(log(a[0]), log(a[1]), log(a[2]));
}

color sigma_from_concentration(float Eumelanin, float Pheomelanin) {
	return Eumelanin*color(0.506, 0.841, 1.653) + Pheomelanin*color(0.343, 0.733, 1.924);
}

color sigma_from_reflectance(color Color, float AzimuthalRoughness) {
	float roughness_fac = (((((0.245*AzimuthalRoughness) + 5.574)*AzimuthalRoughness - 10.73)*AzimuthalRoughness + 2.532)*AzimuthalRoughness - 0.215)*AzimuthalRoughness + 5.969;
	return log3(Color)/roughness_fac;
}

shader node_principled_hair_bsdf(
	color Color = color(0.017513, 0.005763, 0.002059),
	float Melanin = 0.8,
	float MelaninRedness = 1.0,
	float RandomColor = 0.0,
	color Tint = 1.0,
	color AbsorptionCoefficient = color(0.245531, 0.52, 1.365),
	normal Normal = Ng,
	string parametrization = "Absorption coefficient",
	float Offset = radians(2),
	float Roughness = 0.3,
	float RadialRoughness = 0.3,
	float RandomRoughness = 0.0,
	float Coat = 0.0,
	float IOR = 1.55,
	string AttrRandom = "none",
	float Random = 0.0,

	output closure color BSDF = 0)
{
	color sigma;
	float random_value = 0.0;

	if (AttrRandom != "none") {
		getattribute(AttrRandom, random_value);
	}
	else {
		random_value = Random;
	}

	float factor_random_color = 1.0 + 2.0*(random_value - 0.5)*RandomColor;
	float factor_random_roughness = 1.0 + 2.0*(random_value - 0.5)*RandomRoughness;
	float m0_roughness = 1.0 - clamp(Coat, 0.0, 1.0);

	float adjusted_roughness = Roughness*factor_random_roughness;
	float adjusted_radial_roughness = RadialRoughness*factor_random_roughness;
	float melanin_qty = -log(max(1.0 - Melanin, 0.0001));
	float adjusted_eumelanin = melanin_qty*(1.0-MelaninRedness)*factor_random_color;
	float adjusted_pheomelanin = melanin_qty*MelaninRedness*factor_random_color;

	if (parametrization == "Absorption coefficient") {
		sigma = AbsorptionCoefficient;
	}
	else if (parametrization == "Melanin concentration") {
		color melanin_sigma = sigma_from_concentration(adjusted_eumelanin, adjusted_pheomelanin);
		color tint_sigma = sigma_from_reflectance(Tint, adjusted_radial_roughness);
		tint_sigma *= tint_sigma;
		sigma = melanin_sigma + tint_sigma;
	}
	else if (parametrization == "Direct coloring"){
		sigma = sigma_from_reflectance(Color, adjusted_radial_roughness);
		sigma *= sigma;
	}
	else {
		// Falling back to Benedikt Bitterli's brownish hair with Tungsten (via PHEOmelanin concentration)
		// This gives the exact amount set as default above
		sigma = sigma_from_concentration(0.0, 0.8054375);
	}

	//printf("Info: color %f, incoming eumelanin %f, incoming pheomelanin %f, incoming sigma %f, incoming color range %f, incoming normal %f, parametrization %s, resulting sigma %f, Longitudinal %f, Azimuthal %f, roughness range %f, Scale deviation %f, IOR %f\n", Color, Melanin, MelaninRedness, AbsorptionCoefficient, Normal, parametrization, sigma, RandomColor, Roughness, RadialRoughness, RandomRoughness, Offset, IOR);

	BSDF = principled_hair(Normal, sigma, adjusted_roughness, adjusted_radial_roughness, m0_roughness, Offset, IOR);
}
