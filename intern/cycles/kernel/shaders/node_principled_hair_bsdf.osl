/*
 * Copyright 2018 Blender Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "stdosl.h"

color log3 (color a) {
	return color(log(a[0]), log(a[1]), log(a[2]));
}

shader node_principled_hair_bsdf(
	color Color = 0.8,
	float Melanin = 0.0,
	float MelaninRedness = 1.3,
	color AbsorptionCoefficient = color(0.245531, 0.52, 1.365),
	normal Normal = Ng,
	string parametrization = "Absorption coefficient",
	float Offset = radians(2),
	float RoughnessU = 0.3,
	float RoughnessV = 0.3,
	float PrimaryReflectionRoughness = 1.0,
	float IOR = 1.55,

	output closure color BSDF = 0)
{
	color Sigma;

	if (parametrization == "Absorption coefficient") {
		Sigma = AbsorptionCoefficient;
	}
	else if (parametrization == "physical") {
		Sigma = -log3(max(AbsorptionCoefficient, 1e-5));
	}
	else if (parametrization == "Melanin concentration") {
		Sigma = Melanin*color(0.419, 0.697, 1.37) + MelaninRedness*color(0.187, 0.4, 1.05);
	}
	else if (parametrization == "Direct coloring"){
		float roughness_fac = (((((0.245*RoughnessU) + 5.574)*RoughnessU - 10.73)*RoughnessU + 2.532)*RoughnessU - 0.215)*RoughnessU + 5.969;
		Sigma = log3(Color)/roughness_fac;
		Sigma *= Sigma;
	}
	else {
		// Falling back to Benedikt Bitterli's brownish hair with Tungsten (via PHEOmelanin concentration)
		// This gives the exact amount set as default above
		Sigma = 0.0*color(0.419, 0.697, 1.37) + 1.3*color(0.187, 0.4, 1.05);
	}

	//printf("Info: color %f, incoming eumelanin %f, incoming pheomelanin %f, incoming sigma %f, incoming normal %f, parametrization %s, resulting sigma %f, Longitudinal %f, Azimuthal %f, Scale deviation %f, IOR %f\n", Color, Melanin, MelaninRedness, AbsorptionCoefficient, Normal, parametrization, Sigma, RoughnessU, RoughnessV, Offset, IOR);

	BSDF = principled_hair(Normal, Sigma, RoughnessU, RoughnessV, PrimaryReflectionRoughness, Offset, IOR);
}
